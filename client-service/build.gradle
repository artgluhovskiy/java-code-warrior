buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'net.saliman.cobertura' version '2.6.0'
}

ext {
    springBootVersion = '2.1.2.RELEASE'
    targetResourceDir = '/docker'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8
targetCompatibility = 1.8

bootJar {
    baseName = 'client-service-boot'
}

repositories {
    mavenCentral()
    mavenLocal()
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}

dependencies {

    /* *** JCW *** */
    
    implementation project(':commons')
    
    /* *** Spring Boot *** */
    
    implementation('org.springframework.boot:spring-boot-starter')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')
    implementation('org.springframework.boot:spring-boot-starter-security')

    annotationProcessor('org.springframework.boot:spring-boot-configuration-processor')
    
    implementation('org.springframework.boot:spring-boot-devtools')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    
    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testImplementation('org.springframework.security:spring-security-test')
    
    implementation('org.thymeleaf.extras:thymeleaf-extras-springsecurity5')

    /* *** Spring Cloud *** */

    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-ribbon')
    implementation('org.springframework.cloud:spring-cloud-starter-openfeign')
    
    /* *** Third Parties *** */

    implementation('com.squareup.retrofit2:retrofit:2.0.2')
    implementation('com.squareup.retrofit2:converter-jackson:2.6.0')
    
    implementation('com.esotericsoftware:kryo:4.0.0')
    implementation('org.apache.commons:commons-lang3:3.1')
    implementation('org.apache.commons:commons-collections4:4.0')

    implementation('ch.qos.logback:logback-core:1.2.3')
    implementation('org.slf4j:slf4j-api:1.7.26')

    implementation('org.projectlombok:lombok:1.18.4')
    annotationProcessor("org.projectlombok:lombok:1.18.4")

    testImplementation('org.junit.jupiter:junit-jupiter-api:5.3.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.3.1')

    testImplementation('org.mockito:mockito-junit-jupiter:2.18.3')
    testImplementation('org.mockito:mockito-core:2.+')
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE'
    }
}

task collectResourcesToDir(type: Copy, dependsOn: build) {
    println "Copying project resources to the directory '$targetResourceDir'"
    from "$buildDir/libs", "$projectDir/src/main/resources"
    include "*.jar", "*.sh"
    into "$projectDir$targetResourceDir"
}

task runBuild(dependsOn: collectResourcesToDir) {
    println 'Running build!'
}

task cleanProject(type: Delete, dependsOn: clean) {
    delete "$projectDir$targetResourceDir"
}